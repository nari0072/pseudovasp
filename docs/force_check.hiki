{{toc}}
!概要
pseudoVASPでforceの解析解と数値解が一致しているかを確かめるclass.
!使用例
LJでは一致を確認． 
 pvasp --force sample_calc/
などで起動．
 --target site_number
でsite_number(0番)原子，およびすべての原子(negative)をcheck.

! 計算結果
!! 新しい実装での結果．
||site|| x ||y ||z
||   7||    0.01207||    0.01234||    0.00000
||   9||    0.01207||   -0.01234||    0.00000
||  11||    0.01115||   -0.01094||    0.00000
||  13||    0.01115||    0.01094||    0.00000
||  15||    0.01207||    0.00000||    0.01234
||  16||    0.01207||    0.00000||   -0.01234
||  19||    0.01115||    0.00000||   -0.01094
||  20||    0.01115||    0.00000||    0.01094
||  23||   -0.00001||   -0.00012||   -0.00012
||  24||   -0.00001||   -0.00012||    0.00012
||  25||   -0.00001||    0.00012||   -0.00012
||  26||   -0.00001||    0.00012||    0.00012

!【背景】
!!maple script
mapleへは，２次関数でのfittingを外注している．
tmp.txtにあるdataを読み出し，計算した後，tmp1.txtへ書き出している．
<<< maple
file1:="./tmp.txt";
data:=readdata(file1,2);
with(LinearAlgebra):
data2:=convert(Transpose(Matrix(data)),listlist);
with(stats):
eq1:=fit[leastsquare[[x, y], y = a0+a1*x+a2*x^2, {a0,a1,a2}]](data2);
result:=subs(x=0.25,diff(rhs(eq1),x))/8.0827999115;
file2:="./tmp1.txt";
writedata(file2,[result]);
>>>
!!mapleのfitting結果
結果は
<<< tcsh
["", "0.250000000", "0.250000000", "0.000000000"]
   0.2480000000    0.2500000000    0.0000000000
["", "0.250000000", "0.250000000", "0.000000000"]
   0.2490000000    0.2500000000    0.0000000000
["", "0.250000000", "0.250000000", "0.000000000"]
   0.2500000000    0.2500000000    0.0000000000
["", "0.250000000", "0.250000000", "0.000000000"]
   0.2510000000    0.2500000000    0.0000000000
["", "0.250000000", "0.250000000", "0.000000000"]
   0.2520000000    0.2500000000    0.0000000000
  -0.0020000000 -119.5189992000
  -0.0010000000 -119.5196490000
   0.0000000000 -119.5199957000
   0.0010000000 -119.5200393000
   0.0020000000 -119.5197800000
[0.01207440504]
>>>
となり中心原子を動かした状態で，７番原子を動かした時の計算がうまくいっていることを示している．

!【結果】
!!EAM
||サイト||>>数値解||>>解析解
||   7||    0.00145||    0.00160||    0.00000||     0.003575||      0.004751||     -0.000000
||   9||    0.00145||   -0.00160||    0.00000||     0.003575||     -0.004751||     -0.000000
||  11||    0.00133||   -0.00142||    0.00000||     0.003463||     -0.004452||     -0.000000
||  13||    0.00133||    0.00142||    0.00000||     0.003463||      0.004452||     -0.000000
||  15||    0.00145||    0.00000||    0.00160||     0.003575||     -0.000000||      0.004751
||  16||    0.00145||    0.00000||   -0.00160||     0.003575||     -0.000000||     -0.004751
||  19||    0.00133||    0.00000||   -0.00142||     0.003463||     -0.000000||     -0.004452
||  20||    0.00133||    0.00000||    0.00142||     0.003463||     -0.000000||      0.004452
||  23||   -0.00023||   -0.00001||   -0.00001||    -0.000847||     -0.000062||     -0.000062
||  24||   -0.00023||   -0.00001||    0.00001||    -0.000847||     -0.000062||      0.000062
||  25||   -0.00023||    0.00001||   -0.00001||    -0.000847||      0.000062||     -0.000062
||  26||   -0.00023||    0.00001||    0.00001||    -0.000847||      0.000062||      0.000062
!!LJ

||サイト ||||数値解 ||||||解析解|| ||
||   7||    0.01207||    0.01234||    0.00000||      0.012074||      0.012333||      0.000000
||   9||    0.01207||   -0.01234||    0.00000||      0.012074||     -0.012333||      0.000000
||  11||    0.01115||   -0.01094||    0.00000||      0.011147||     -0.010941||      0.000000
||  13||    0.01115||    0.01094||    0.00000||      0.011147||      0.010941||      0.000000
||  15||    0.01207||    0.00000||    0.01234||      0.012074||      0.000000||      0.012333
||  16||    0.01207||    0.00000||   -0.01234||      0.012074||      0.000000||     -0.012333
||  19||    0.01115||    0.00000||   -0.01094||      0.011147||      0.000000||     -0.010941
||  20||    0.01115||    0.00000||    0.01094||      0.011147||      0.000000||      0.010941
||  23||   -0.00001||   -0.00012||   -0.00012||     -0.000010||     -0.000116||     -0.000116
||  24||   -0.00001||   -0.00012||    0.00012||     -0.000010||     -0.000116||      0.000116
||  25||   -0.00001||    0.00012||   -0.00012||     -0.000010||      0.000116||     -0.000116
||  26||   -0.00001||    0.00012||    0.00012||     -0.000010||      0.000116||      0.000116

なんかまちがってるし．間違いらしきもん発見．
零点から遠く離れたところでfittingするのは極めて困難．

LJに関しては，数値解と解析解は完全に一致している．これは，
#解析解が正しく計算できていること
#数値解を求めるルーチンにバグがないこと
を証明している．EAMでも一致させる必要がある．
しかし，当面のスケジュールを考えてEAMではなく，LJでrelaxさせることにする．


!EAMのcode
上記の計算結果よりLJでは解析解と数値解がほぼ一致することが確認できた．おなじ計算ルーチンを
使ってEAMに適用した結果，片桐codeでは相当異なった数値となった．そこで，いくつかの見直しを
行い暫定的なコードを以下の通りとした．まだ，一致が思わしくないので，EAMをrelaxに使うときには
再検証が必要である．
<<< ruby
  def atom_force_bob()
    rho=0.0
    f,f_p=[0.0,0.0,0.0],[0.0,0.0,0.0]
    f_n_left,f_n_right=[0.0,0.0,0.0],[0.0,0.0,0.0]
    nl.each do |aj|
      xx=f_distance(@pos,aj.pos) 
      r=distance(@pos,aj.pos) 
      rho_j=0.0 #ここの計算がloopの中にあるのは正しいか？
      aj.nl.each{|ak|
#        next if (ak.pos==@pos) #こいつを除外する理由は何？
        r_k=distance(aj.pos,ak.pos)
        h_k=B0*exp(-Q*r_k)
        rho_j+=h_k*h_k
      }
      dfdrho_j=1/(2*sqrt(rho_j))
      dpdr=-A0*P*exp(-P*r) 
      h=B0*exp(-Q*r)
      rho+=h*h 
      dhdr=-2*Q*h*h #phi'(r)
      xx.each_with_index{|xi,i| 
        f_p[i]+=xi/r*dpdr
        f_n_left[i]+= -xi/r*dhdr
        f_n_right[i]+= xi/r*dhdr*dfdrho_j
      }
    end
>>>
