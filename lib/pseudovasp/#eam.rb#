# -*- coding: utf-8 -*-
module EAM
  extend self
  # set for Al, E=-1.0 at r=4.04...
=begin
  Q=3.00*0.2474390089
  A0=24.18922289
  B0=3.612254621
  POQ=3.0
  P=Q*POQ
=end
# for phi(r0)=-1.0, poq=3.0, r0=2.8577
A0,B0,P,POQ,Q=69.1378255, 12.47431958, 2.148157653, 2.893854749, 0.7423170267
# for phi(r0)=-3.39, Ev=0.8, p=3.0 at r0, r0=2.8577
  CUT_OFF=4.0*0.8

module_function

  def atom_energy()#LJP
    ene,rho=0.0,0.0
    nl.each do |aj|
      r=distance(@pos,aj.pos)
      ene += A0*exp(-P*r)
      h = B0*exp(-Q*r)
      rho += h*h
    end
    return ene-sqrt(rho)
  end

  def atom_force()
    atom_force_katagiri
#    atom_force_bob
  end

  def atom_force_bob()
    rho=0.0
    f,f_p=[0.0,0.0,0.0],[0.0,0.0,0.0]
    f_n_left,f_n_right=[0.0,0.0,0.0],[0.0,0.0,0.0]
    nl.each do |aj|
      xx=f_distance(@pos,aj.pos) 
      r=distance(@pos,aj.pos) 
      rho_j=0.0 #’¤³’¤³’¤Î’·×’»»’¤¬loop’¤Î’Ãæ’¤Ë’¤¢’¤ë’¤Î’¤Ï’Àµ’¤·’¤¤’¤«’¡©
      aj.nl.each{|ak|
#        next if (ak.pos==@pos) #’¤³’¤¤’¤Ä’¤ò’½ü’³°’¤¹’¤ë’Íý’Í³’¤Ï’²¿’¡©
        r_k=distance(aj.pos,ak.pos)
        h_k=B0*exp(-Q*r_k)
        rho_j+=h_k*h_k
      }
      dfdrho_j=1/(2*sqrt(rho_j))
      dpdr=-A0*P*exp(-P*r) 
      h=B0*exp(-Q*r)
      rho+=h*h 
      dhdr=-2*Q*h*h #phi'(r)
      xx.each_with_index{|xi,i| 
        f_p[i]+=xi/r*dpdr
        f_n_left[i]+= -xi/r*dhdr
        f_n_right[i]+= xi/r*dhdr*dfdrho_j
      }
    end

    dfdrho_i=1/(2*sqrt(rho))
    3.times do |i|
      f_n_left[i]*=dfdrho_i
      f[i]=-(f_p[i]+f_n_left[i]+f_n_right[i])
    end
    return f
  end

  def atom_force_katagiri()
    rho=0.0
    f,f_p=[0.0,0.0,0.0],[0.0,0.0,0.0]
    f_n_left,f_n_right=[0.0,0.0,0.0],[0.0,0.0,0.0]
    nl.each do |aj|
      xx=f_distance(@pos,aj.pos) 
      r=distance(@pos,aj.pos) 
      f_rho_k=0.0 #f_n_right ’¤Î’·×’»» 
      aj.nl.each{|ak|#’¸¶’»Ò j ’¤Î’ºÇ’¶á’ÀÜ’¸¶’»Ò
        next if (ak.pos==@pos)
        rho_k=0.0
        kr=distance(aj.pos,ak.pos)
        ktmp=exp(-Q*kr)
        rho_k=ktmp*ktmp
        f_rho_k+=1/(2*sqrt(rho_k))
      }
      dpdr=-A0*P*exp(-P*r)  #g_p ’¤Î’·×’»»
      tmp=exp(-Q*r)
      rho+=tmp*tmp #g_n_left ’¤Î’·×’»»
      phi=-2*B0*B0*Q*tmp*tmp #phi'(r)
      xx.each_with_index{|xi,i| 
        f_p[i]+=xi/r*dpdr
        f_n_left[i]+= -xi/r*phi
        f_n_right[i]+= xi/r*phi*f_rho_k
      }
    end

    f_rho=1/(2*sqrt(rho))
    3.times do |i|
      f_n_left[i]*=f_rho
      f[i]=-(f_p[i]+f_n_left[i]+f_n_right[i])
    end
#    print "bob\n"
#    p f
#    exit
    return f
  end

=begin
  A=18.19007708
  B=89.22765864
  def atom_force()
    f=[0.0,0.0,0.0]
    nl.each do |aj|
      x,y,z=f_distance(@pos,aj.pos)
      r=sqrt(x**2+y**2+z**2)
      dedr=((3*A/(r)**4)-(5*B/(r)**6))
      f[0] += -x/r*dedr
      f[1] += -y/r*dedr
      f[2] += -z/r*dedr
    end
    return f
  end
=end
end    
